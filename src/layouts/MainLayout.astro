---
import { t, localizePath } from "../utils/i18n";
import i18next from "i18next";

interface Props {
  title: string;
  description?: string;
  isHomePage?: boolean;
}

const { title, description = t("common.description"), isHomePage = false } = Astro.props;
const currentLanguage = i18next.language;
---

<!DOCTYPE html>
<html lang={currentLanguage}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="icon" type="image/svg+xml" href={import.meta.env.BASE_URL + 'favicon.svg'} />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="stylesheet" 
          href="https://fonts.googleapis.com/css2?family=Newsreader:wght@400;500;700;800&family=Noto+Sans:wght@400;500;700;900&display=swap" 
          as="style" 
          onload="this.rel='stylesheet'" />
    <link rel="stylesheet" href={import.meta.env.BASE_URL + 'css/main.css'} />
    <slot name="head" />
  </head>
  <body>
    {!isHomePage ? (
      <header class="blog-header">
        <div class="container">
          <div class="header-content">
            <h1 class="site-title">RunFun Blog</h1>
            <nav>
              <ul>
                <li><a href={localizePath("/")}>{t("navigation.home")}</a></li>
                <li><a href={localizePath("/blog")}>{t("navigation.blog")}</a></li>
                <li><a href={localizePath("/categories")}>{t("navigation.categories")}</a></li>
                <li><a href={localizePath("/about")}>{t("navigation.about")}</a></li>
              </ul>
            </nav>
          </div>
        </div>
      </header>
    ) : (
      <header class="home-header">
        <div class="container">
          <div class="logo">
            <a href={localizePath("/")}>RunFun</a>
          </div>
          <button class="menu-toggle" aria-label="Menu">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <rect y="4" width="24" height="2" fill="currentColor"></rect>
              <rect y="11" width="24" height="2" fill="currentColor"></rect>
              <rect y="18" width="24" height="2" fill="currentColor"></rect>
            </svg>
          </button>
        </div>
      </header>
    )}
    
    <main class={isHomePage ? "" : "container"}>
      <slot />
    </main>
    
    {!isHomePage && (
      <footer>
        <div class="container">
          <p class="footer-copyright">&copy; {new Date().getFullYear()} RunFun Blog. {t("common.copyright")}</p>
          <p class="footer-credit">Designed with passion by 小波津 駿.</p>
        </div>
      </footer>
    )}
    
    <script>
      document.querySelector('.menu-toggle')?.addEventListener('click', () => {
        alert('Menu clicked!'); // Simple placeholder for menu functionality
      });
      
      // Homepage scroll header effect and enhancements
      if (document.querySelector('.home-header')) {
        const header = document.querySelector('.home-header');
        const fullscreenContainer = document.querySelector('.fullscreen-container');
        
        if (fullscreenContainer) {
          // Header scroll effect
          fullscreenContainer.addEventListener('scroll', () => {
            if (fullscreenContainer.scrollTop > 50) {
              header.classList.add('scrolled');
            } else {
              header.classList.remove('scrolled');
            }
          });
          
          // Improve scroll-snap behavior for better cross-browser compatibility
          let isScrolling = false;
          
          fullscreenContainer.addEventListener('scroll', () => {
            if (!isScrolling) {
              isScrolling = true;
              // Debounce to improve performance
              setTimeout(() => {
                isScrolling = false;
              }, 100);
            }
          });
          
          // Enhanced touch scrolling for mobile devices
          let touchStartY = 0;
          let touchEndY = 0;
          
          fullscreenContainer.addEventListener('touchstart', (e) => {
            touchStartY = e.changedTouches[0].screenY;
          });
          
          fullscreenContainer.addEventListener('touchend', (e) => {
            touchEndY = e.changedTouches[0].screenY;
            const touchDiff = touchStartY - touchEndY;
            
            // Only trigger if it's a significant swipe (more than 50px)
            if (Math.abs(touchDiff) > 50) {
              // Let CSS scroll-snap handle the actual snapping
              // This just ensures smooth behavior on touch devices
            }
          });
        }
      }
    </script>
  </body>
</html>
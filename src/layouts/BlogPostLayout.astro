---
import MainLayout from "./MainLayout.astro";
import type { CollectionEntry } from "astro:content";

interface Props {
  title: string;
  description?: string;
  pubDate: Date | string;
  updatedDate?: Date | string;
  heroImage?: string;
  categories?: string[];
}

const { title, description, pubDate, updatedDate, heroImage, categories } = Astro.props;

// Format date or use a fallback
function formatDate(date: Date | string | undefined) {
  if (!date) return '';
  
  const dateObj = date instanceof Date ? date : new Date(date);
  
  if (isNaN(dateObj.getTime())) {
    return String(date);
  }
  
  return dateObj.toLocaleDateString('en-us', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

const formattedPubDate = formatDate(pubDate);
const formattedUpdatedDate = formatDate(updatedDate);

// Get ISO string safely
function toISOSafe(date: Date | string | undefined) {
  if (!date) return '';
  
  const dateObj = date instanceof Date ? date : new Date(date);
  
  if (isNaN(dateObj.getTime())) {
    return '';
  }
  
  return dateObj.toISOString();
}

const pubDateISO = toISOSafe(pubDate);
const updatedDateISO = toISOSafe(updatedDate);
---
---

<MainLayout title={title} description={description}>
  <article class="blog-post">
    {heroImage && <img src={import.meta.env.BASE_URL + '/' + heroImage.replace(/^\//, '')} alt={title} class="hero-image" />}
    
    <h1 class="title">{title}</h1>
    
    <div class="post-meta">
      <time datetime={pubDateISO}>Published on {formattedPubDate}</time>
      {updatedDate && (
        <div class="updated-date">
          <time datetime={updatedDateISO}>
            Updated on {formattedUpdatedDate}
          </time>
        </div>
      )}
      {categories && categories.length > 0 && (
        <div class="categories">
          <span>Categories: </span>
          <ul>
            {categories.map((category) => (
              <li>
                <a href={`/category/${category.toLowerCase().replace(/\s+/g, '-')}`}>{category}</a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
    
    <div class="post-content">
      <slot />
    </div>
  </article>
</MainLayout>

<style>
  .blog-post {
    margin-bottom: 3rem;
  }
  
  .hero-image {
    width: 100%;
    height: auto;
    border-radius: 0.5rem;
    margin-bottom: 1.5rem;
    object-fit: cover;
    max-height: 400px;
  }
  
  .title {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }
  
  .post-meta {
    color: #666;
    font-size: 0.9rem;
    margin-bottom: 2rem;
  }
  
  .updated-date {
    margin-top: 0.5rem;
    font-style: italic;
  }
  
  .categories {
    margin-top: 0.75rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .categories ul {
    display: flex;
    list-style: none;
    padding: 0;
    margin: 0;
    gap: 0.5rem;
    flex-wrap: wrap;
  }
  
  .categories li {
    margin: 0;
  }
  
  .categories a {
    display: inline-block;
    background-color: var(--color-primary);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.8rem;
    text-decoration: none;
    transition: background-color 0.2s;
  }
  
  .categories a:hover {
    background-color: var(--color-secondary);
  }
  
  .post-content {
    line-height: 1.8;
  }
  
  .post-content :global(h2) {
    font-size: 1.75rem;
    margin: 2rem 0 1rem;
  }
  
  .post-content :global(h3) {
    font-size: 1.5rem;
    margin: 1.5rem 0 1rem;
  }
  
  .post-content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 0.25rem;
  }
  
  .post-content :global(blockquote) {
    border-left: 4px solid #ddd;
    padding-left: 1rem;
    font-style: italic;
    margin: 1.5rem 0;
    color: #555;
  }
  
  .post-content :global(pre) {
    background-color: #f6f8fa;
    padding: 1rem;
    border-radius: 0.25rem;
    overflow-x: auto;
    margin: 1.5rem 0;
  }
  
  .post-content :global(code) {
    background-color: #f6f8fa;
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-size: 0.9rem;
  }
</style>